"use strict";(self.webpackChunk_feasibleone_blong_docs=self.webpackChunk_feasibleone_blong_docs||[]).push([[6190],{3341:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>h});var s=n(9541),a=n(7743);const r={},o="Test",i={id:"patterns/test",title:"Test",description:"Test handlers",source:"@site/docs/patterns/test.md",sourceDirName:"patterns",slug:"/patterns/test",permalink:"/blong-docs/docs/patterns/test",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"REST",permalink:"/blong-docs/docs/patterns/rest"},next:{title:"Validation",permalink:"/blong-docs/docs/patterns/validation"}},c={},h=[{value:"Test handlers",id:"test-handlers",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"test",children:"Test"}),"\n",(0,s.jsx)(t.h2,{id:"test-handlers",children:"Test handlers"}),"\n",(0,s.jsxs)(t.p,{children:["Writing tests is very similar to writing handlers and library functions.\nThe main difference is that the files are in the ",(0,s.jsx)(t.code,{children:"test/test"})," folder,\nfirst ",(0,s.jsx)(t.code,{children:"test"})," being the layer name and the second ",(0,s.jsx)(t.code,{children:"test"})," is part\nof the name of the handlers, which becomes ",(0,s.jsx)(t.code,{children:"xxx.test"}),".\nThe layer name is useful to activate tests only when needed,\nwhile the ",(0,s.jsx)(t.code,{children:"xxx.test"})," is convenient way to find all test handlers\nand attach them to the orchestrator where they can run."]}),"\n",(0,s.jsxs)(t.p,{children:["Each test must return an array of steps. Each step is a function\nor another array of steps. Test handlers receive two arguments:\nthe first one is parameters for the test, the second one is ",(0,s.jsx)(t.code,{children:"$meta"}),".\nThe first parameter can optionally include the property ",(0,s.jsx)(t.code,{children:"name"}),",\nto give name of the test. This is useful when reusing test handlers\nand passing different parameters, the test to be reported in the\noutput as different test names. The test name must be set as a property\nof the returned array. This is done by the ",(0,s.jsx)(t.code,{children:"rename"})," function provided\nby the framework, which returns the passed array with the ",(0,s.jsx)(t.code,{children:"name"})," property\nset. When the steps of the test are executed, the result of each step\nis set in an object called ",(0,s.jsx)(t.code,{children:"context"}),". The name of the function determines\nthe name of the property within the context, where the result is set.\nTests start with a context, which is an empty object. Subsequent steps can\naccess the context, so that values from previous tests can be passed to\nhandlers and other tests. Test steps are called with two parameters:\n",(0,s.jsx)(t.code,{children:"assert"})," and ",(0,s.jsx)(t.code,{children:"context"}),". By default the assert function is the one\ncoming from ",(0,s.jsx)(t.code,{children:"node:assert"}),", but can be changed to other ones, like\nthe ones coming from ",(0,s.jsx)(t.a,{href:"https://node-tap.org/",children:"tap"}),", which are mainly\nuseful for ",(0,s.jsx)(t.a,{href:"https://www.npmjs.com/package/@tapjs/snapshot",children:"snapshot testing"}),"\nwith the ",(0,s.jsx)(t.code,{children:"matchSnapshot"})," assertion function, which is not available in\n",(0,s.jsx)(t.code,{children:"node:assert"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"// realmname/test/test/testSomething.ts\nimport {IMeta, handler} from '@feasibleone/blong';\nimport type Assert from 'node:assert';\n\nexport default handler(({\n    lib: {rename},\n    handler: {\n        testLoginTokenCreate,\n        subjectObjectPredicate\n    }\n}) => ({\n    testSomething: ({name = 'something'}, $meta) =>\n        rename([\n            testLoginTokenCreate({}, $meta), // reuse another test\n            async function testCase(\n                assert: typeof Assert,\n                {$meta}: {$meta: IMeta}\n            ) {\n                const result = await subjectObjectPredicate<{data: string}>(\n                    {},\n                    $meta\n                );\n                assert.equal(result.data, 'expected data', 'Return expected data');\n            }\n        ], name)\n}));\n"})})]})}function l(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},7743:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>o});var s=n(3981);const a={},r=s.createContext(a);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);