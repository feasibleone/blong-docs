"use strict";(self.webpackChunk_feasibleone_blong_docs=self.webpackChunk_feasibleone_blong_docs||[]).push([[9513],{9905:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>n,metadata:()=>c,toc:()=>a});var t=s(9541),o=s(7743);const n={},i="Typed Errors",c={id:"concepts/errors",title:"Typed Errors",description:"The frameworks expects all errors generated within it to have some additional",source:"@site/docs/concepts/errors.md",sourceDirName:"concepts",slug:"/concepts/errors",permalink:"/blong-docs/docs/concepts/errors",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dependencies",permalink:"/blong-docs/docs/concepts/dependencies"},next:{title:"Gateway",permalink:"/blong-docs/docs/concepts/gateway"}},d={},a=[];function l(e){const r={a:"a",code:"code",h1:"h1",li:"li",p:"p",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"typed-errors",children:"Typed Errors"}),"\n",(0,t.jsxs)(r.p,{children:["The frameworks expects all errors generated within it to have some additional\nproperties, on top of the ",(0,t.jsx)(r.a,{href:"https://nodejs.org/docs/latest/api/errors.html",children:"standard ones"}),".\nThe only mandatory property is the ",(0,t.jsx)(r.code,{children:"type"}),", that's why we call these\n",(0,t.jsx)(r.code,{children:"typed errors"}),". Here is the list of properties:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"type"}),": Namespaced string, that identifies the type of error. The namespace is\nusually the name of the realm, adapter or other subsystem of the framework."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"print"}),": A user friendly message, that is suitable for showing in the UI or other\nmedium (printed receipt, etc.)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"message"}),": The message that goes in the logs and is suitable for troubleshooting"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"params"}),": Object, that contains properties with more details about the error.\nThe params are merged in placeholders in the message."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"req"}),": When the error corresponds to a HTTP request, this object contains the following\nproperties of the request: ",(0,t.jsx)(r.code,{children:"httpVersion"}),", ",(0,t.jsx)(r.code,{children:"url"}),", ",(0,t.jsx)(r.code,{children:"method"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"res"}),": When the error corresponds to a HTTP response, this object contains the\nfollowing properties of the response: ",(0,t.jsx)(r.code,{children:"httpVersion"}),", ",(0,t.jsx)(r.code,{children:"statusCode"})]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["To ensure all errors are typed, the framework provides some patterns to define\nand use such errors. For more info read about the ",(0,t.jsx)(r.a,{href:"/blong-docs/docs/patterns/error",children:"error pattern"}),"."]})]})}function h(e={}){const{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},7743:(e,r,s)=>{s.d(r,{Z:()=>c,a:()=>i});var t=s(3981);const o={},n=t.createContext(o);function i(e){const r=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(n.Provider,{value:r},e.children)}}}]);