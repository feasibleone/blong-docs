"use strict";(self.webpackChunk_feasibleone_blong_docs=self.webpackChunk_feasibleone_blong_docs||[]).push([[6830],{7186:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var s=n(9541),o=n(8991);const t={},i="Error",a={id:"patterns/error",title:"Error",description:"The patterns below can be used to define and throw",source:"@site/docs/patterns/error.md",sourceDirName:"patterns",slug:"/patterns/error",permalink:"/blong-docs/docs/patterns/error",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/blong-docs/docs/patterns/configuration"},next:{title:"Handler",permalink:"/blong-docs/docs/patterns/handler"}},l={},c=[{value:"Defining errors",id:"defining-errors",level:2},{value:"Throwing errors",id:"throwing-errors",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"error",children:"Error"}),"\n",(0,s.jsxs)(r.p,{children:["The patterns below can be used to define and throw\n",(0,s.jsx)(r.a,{href:"/blong-docs/docs/concepts/errors",children:"typed errors"})," within the framework"]}),"\n",(0,s.jsx)(r.h2,{id:"defining-errors",children:"Defining errors"}),"\n",(0,s.jsxs)(r.p,{children:["To define typed errors withing the framework, call the ",(0,s.jsx)(r.code,{children:"error"}),"\nfunction with an object where each property defines a single error.\nProperty names must use prefixes, so that name collisions are avoided."]}),"\n",(0,s.jsx)(r.p,{children:"For simple errors, the value of the property is the error message:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"error({\n    adapterDisconnect: 'Adapter disconnected'\n})\n"})}),"\n",(0,s.jsx)(r.p,{children:"For more advanced cases, the error is defined as an object,\nthat defines additional properties for the error:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"error({\n    gatewayJwtMissingHeader: {\n        message: 'Missing bearer authorization header',\n        statusCode: 401\n    }\n})\n"})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"error"})," function defines the error, so that it can easily\nbe thrown in various places of the source code.\nThis function is available in various places when using the framework\nand can be used both implicitly and explicitly, for example:"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Explicitly, when using ",(0,s.jsx)(r.code,{children:"lib.error"})," in the ",(0,s.jsx)(r.a,{href:"/blong-docs/docs/patterns/handler",children:"handler"})," function:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"import {handler} from '@feasibleone/blong';\n\nexport default handler(({lib: {error}}) => {\n    error({\n        parkingInvalidZone: 'Invalid zone {zone}'\n    });\n});\n"})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Implicitly in the ",(0,s.jsx)(r.code,{children:"error"})," layer of a realm:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"// realmname/server.ts\nimport {realm} from '@feasibleone/blong';\n\nexport default realm(blong => ({\n    children: ['./error']\n}));\n"})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"error"})," function will be called implicitly for the file named ",(0,s.jsx)(r.code,{children:"error.ts"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"// realmname/error/error.ts\nexport default {\n    subjectSum: 'Numbers must be positive'\n};\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"throwing-errors",children:"Throwing errors"}),"\n",(0,s.jsxs)(r.p,{children:["The most common place to throw an error is when using the\n",(0,s.jsx)(r.code,{children:"handler"})," or ",(0,s.jsx)(r.code,{children:"library"})," functions."]}),"\n",(0,s.jsx)(r.p,{children:"Simple errors do not expect any parameters:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"import {library} from '@feasibleone/blong';\n\nexport default library(({errors}) =>\n    function sum(...params: number[]) {\n        // some processing\n        throw errors.subjectSum();\n    }\n);\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Other errors may expect some ",(0,s.jsx)(r.code,{children:"params"}),". Also to wrap an external error,\npass it in the ",(0,s.jsx)(r.code,{children:"cause"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"import {handler} from '@feasibleone/blong';\n\nexport default handler(({errors}) => ({\n    async parkingPay({zone}) {\n        try {\n            // some processing\n        } catch (cause) {\n            throw errors.parkingInvalidZone({\n                cause,\n                params: {\n                    zone\n                }\n            });\n        }\n    }\n}));\n"})})]})}function h(e={}){const{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8991:(e,r,n)=>{n.d(r,{Z:()=>a,a:()=>i});var s=n(3981);const o={},t=s.createContext(o);function i(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);